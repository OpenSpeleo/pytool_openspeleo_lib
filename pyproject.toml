[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.distutils.bdist_wheel]
universal = true

[tool.setuptools.package-dir]
openspeleo_lib = "openspeleo_lib"

[project]
name = "openspeleo_lib"
version = "0.0.1"
description = "A library to read/write and convert OpenSpeleo files"
readme = "README.md"
requires-python = ">=3.13"
license = { file = "LICENSE" }
keywords = ["cave", "survey", "karst"]
authors = [{ name = "Jonathan Dekhtiar", email = "jonathan@dekhtiar.com" }]
maintainers = [{ name = "Jonathan Dekhtiar", email = "jonathan@dekhtiar.com" }]
classifiers = [
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Information Technology",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",

  # Pick your license as you wish
  "License :: OSI Approved :: Apache Software License",

  # Not OS Specific
  "Operating System :: OS Independent",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "requires-python" key in this file.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
  "argparse>=1.4,<1.5",
  "bidict>=0.23,<0.24",
  "openspeleo_core",
  "orjson>=3.10,<3.11",
  "pydantic>=2.10,<2.12",
  "pydantic-extra-types>=2.10,<2.11",
  "lxml>=5.3,<5.4",
]

[project.optional-dependencies]
dev = [
  "check-manifest",
  # Pre Commit Hooks
  "pre-commit>=4.1,<4.3",
  # Benchmarking
  "pyinstrument>=5.0,<6.0",
  # Linting
  "ruff>=0.3,<0.12",
]
test = [
  "deepdiff>=7.0,<9.0",
  "hypothesis>=6.128,<6.133",
  "pytest>=8.0.0,<9.0.0",
  "pytest-cov>=5.0.0,<7.0.0",
  "pytest-dotenv>=0.5.0,<1.0.0",
  "pytest-env>=1.1.3,<2.0.0",
  "pytest-runner>=6.0.0,<7.0.0",
  "pytest-ordering>=0.6,<1.0.0",
  "parameterized>=0.9.0,<0.10",
  "xmltodict>=0.13,<0.15",
]

[project.urls]
"Homepage" = "https://pypi.org/project/openspeleo-lib/"
"Bug Reports" = "https://github.com/OpenSpeleo/pytool_open_speleo/issues"
"Source" = "https://github.com/OpenSpeleo/pytool_open_speleo"

[project.scripts]
openspeleo = "openspeleo_lib.commands.main:main"

[project.entry-points."openspeleo_lib.actions"]
convert = "openspeleo_lib.commands.convert:convert"
validate_tml = "openspeleo_lib.commands.validate_tml:validate"

[tool.pytest.ini_options]
testpaths = ["tests/"]
addopts = "-vvv --cov=openspeleo_lib --cov-report=term-missing"
# addopts = "-vvv --cov=openspeleo_lib --cov-report=term-missing --capture=no"


[tool.pytest_env]

# # This is configuration specific to the `setuptools` build backend.
# # If you are using a different build backend, you will need to change this.
# [tool.setuptools]
# # If there are data files included in your packages that need to be
# # installed, specify them here.
# package-data = {"sample" = ["*.dat"]}

[tool.isort]
profile = "black"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "*/migrations/*.py",
  "staticfiles/*",
]
# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF",
]
ignore = [
  "COM812", # Checks for the absence of trailing commas.
  "DTZ007", # Checks for uses of datetime.datetime.strptime() that lead to naive
  # datetime objects.
  "EM101",  # Checks for the use of string literals in exception constructors.
  "EM102",  # Checks for the use of f-strings in exception constructors.
  "ERA001", # Checks for commented-out Python code.
  "EXE001", # Checks for a shebang directive in a file that is not executable.
  "FBT001", # Checks for the use of boolean positional arguments in function
  # definitions, as determined by the presence of a bool type hint.
  "FBT002", # Checks for the use of boolean positional arguments in function
  # definitions, as determined by the presence of a boolean default value.
  "N806",    # Checks for the use of non-lowercase variable names in functions.
  "N815",    # Checks for class variable names that follow the mixedCase convention.
  "PLR0913", # Checks for function definitions that include too many arguments.
  "PLR2004", # Checks for the use of unnamed numerical constants ("magic") values in
  # comparisons.
  "PYI024", # Checks for uses of collections.namedtuple in stub files.
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "S101",   # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "S311",   # Checks for uses of cryptographically weak pseudo-random number generators.
  "SIM102", # sometimes it's better to nest
  "TRY003", # Checks for long exception messages that are not defined in the exception
  # class itself.
  "UP009", # Checks for unnecessary UTF-8 encoding declarations.
  "UP038", # Checks for uses of isinstance/issubclass that take a tuple of types for
  # comparison. Deactivated because it can make the code slow:
  # https://github.com/astral-sh/ruff/issues/7871
  "PLR0912", # Checks for functions or methods with too many branches, including (nested)
  # if, elif, and else branches, for loops, try-except clauses, and match and case statements.
  "C901", # Checks for functions with a high McCabe complexity.
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = ["UP038"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true
