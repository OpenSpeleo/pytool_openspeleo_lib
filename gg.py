import json
from pathlib import Path

from deepdiff import DeepDiff


# Function to transform from the first format to the second format
def transform_to_survey_section(data: dict) -> dict:
    survey_sections = {}
    for survey_shot in data["Data"].pop("SurveyData"):
        section_name = survey_shot.pop("Section")

        if section_name not in survey_sections:
            survey_sections[section_name] = {
                "ID": len(survey_sections) + 1,  # section ID - Autogenerated
                "Color": survey_shot.pop("Color"),
                "Explorer": survey_shot.pop("Explorer"),
                "Name": section_name,
                "SurveyData": [],
            }
        else:
            for key in ["Color", "Explorer"]:
                if survey_sections[section_name][key] != survey_shot[key]:
                    raise ValueError(
                        f"Section {section_name} has different `{key}`: "
                        f"{survey_sections[section_name][key]=} and {survey_shot[key]=}"
                    )
            del survey_shot["Color"]
            del survey_shot["Explorer"]

        survey_sections[section_name]["SurveyData"].append(survey_shot)

        data["Data"]["SurveySection"] = list(survey_sections.values())

    return data


# Function to transform from the second format back to the first format
def transform_to_survey_data(data):
    survey_data_list = []

    for section_data in data["Data"].pop("SurveySection"):
        section_name = section_data.pop("Name")
        section_color = section_data.pop("Color")
        section_explorer = section_data.pop("Explorer")

        for survey_data in section_data["SurveyData"]:
            survey_data["Section"] = section_name
            survey_data["Color"] = section_color
            survey_data["Explorer"] = section_explorer
            survey_data_list.append(survey_data)

    data["Data"]["SurveyData"] = survey_data_list

    return data


if __name__ == "__main__":
    with Path("data.import.before.json").open(mode="r") as file:
        original_data = json.loads(file.read())

    # Transform to the second format
    transformed_data = transform_to_survey_section(original_data)
    # print(json.dumps(transformed_data, indent=4))

    with Path("data.import.permutted.json").open(mode="w") as file:
        # original_data = json.loads(file.read())
        json.dump(transformed_data, file, indent=2)

    # Transform back to the first format
    reverted_data = transform_to_survey_data(transformed_data)
    # print(json.dumps(reverted_data, indent=4))

    diff = DeepDiff(original_data, reverted_data, ignore_order=True)
    assert diff == {}, f"Round trip transformation failed: {diff}"
    print("Round trip transformation is identical.")
